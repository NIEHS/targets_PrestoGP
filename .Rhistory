data_analysis <- splits |>
analysis()
data_analysis
# 5) A list of locs, each element is a matrix of the locations
# We need to get the locations from the original data which is an sf object
# Then we need to get the time variable - Year
# Then we need to group by chemical name and nest the data
# Then we need to create a list of the locations
pesticide_locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
pesticide_locs
# 5) A list of locs, each element is a matrix of the locations
# We need to get the locations from the original data which is an sf object
# Then we need to get the time variable - Year
# Then we need to group by chemical name and nest the data
# Then we need to create a list of the locations
# Then we need to conver the geometry to a matrix since PrestoGP doesn't take sf objects
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ st_coordinates(.x))) |>
pull(data)
locs
locs[[1]]
locs[[2]]
# 5) A list of locs, each element is a matrix of the locations
# We need to get the locations from the original data which is an sf object
# Then we need to get the time variable - Year
# Then we need to group by chemical name and nest the data
# Then we need to create a list of the locations
# Then we need to conver the geometry to a matrix since PrestoGP doesn't take sf objects
# Make sure the Time variable is included in the data
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs[[1]]
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs <- locs |>
map(~ st_coordinates(.x)) |>
map(~ as.matrix(.x)) |>
map(~ .x[,-1])
locs[[1]]
length(locs)
head(locs[[1]])
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
head(locs[[1]])
locs <- locs |>
map(~ st_coordinates(.x))
locs[[1]]
locs[[1]] |> head()
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs[[1]]
locs <- locs |>
map(~ st_coordinates(.x))
locs[[1]]
locs[[1]] |> head()
locs <- locs |>
map(~ st_coordinates(.x) + Year)
locs <- locs |> # Retain Year
map(~ .x %>%
st_coordinates() |>
as.data.frame() |>
as.matrix())
?map
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs
locs <- locs |>
map(~ st_coordinates(.x)) |
map(~ as.matrix(.x)) |>
map(~ .x[,-1])
locs <- locs |> # Retain Year
map(~ st_coordinates(.x)) |>
map(~ as.matrix(.x)) |>
map(~ .x[,-1])
locs[[1]]
locs[[1]] |> head()
locs <- locs |> # Retain Year
map(~ st_coordinates(.x)) |>
map(~ .x[,-1])
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs <- locs |> # Retain Year
map(~ st_coordinates(.x)) |>
map(~ .x[,-1])
locs[[1]] |> head()
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs <- locs |> # Retain Year
map(~ st_coordinates(.x))
locs[[1]]
locs[[1]]|> head()
typeof(locs[[1]])
locs[[1]]$X
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs[[1]]
locs <- locs |> # Retain Year
map(Year ~ st_coordinates(.x))
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
# Update the locs list
locs <- locs |>
map(~ {
coords <- st_coordinates(.x)
data.frame(
X = coords[, "X"],
Y = coords[, "Y"],
Year = .x$Year
)
})
locs[[1]]
locs[[1]] |> head()
# 5) A list of locs, each element is a matrix of the locations
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
# Update the locs list
locs <- locs |>
map(~ {
coords <- st_coordinates(.x)
data.frame(
X = coords[, "X"],
Y = coords[, "Y"],
Year = .x$Year
)
})
# 6) Apanasovich is TRUE
Apanasovich = TRUE
# 7) scaling = c(1,1,2) -> maybe needs to be list? could also do c(1,2,3)
scaling = c(1,1,2)
pesticide_mvm <-  new("MultivariateVecchiaModel", n_neighbors = 10)
# 3) Impute.y = TRUE, impute the missing values in Y
Impute.y = TRUE
?prestogp_fit
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
locs[[1]]
is.matrix(locs[[1]])
as.matrix(locs[[1]])
is.matrix(as.matrix(locs[[1]]))
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
# Update the locs list
locs <- locs |>
map(~ {
coords <- st_coordinates(.x)
mat <- as.matrix(data.frame(
X = coords[, "X"],
Y = coords[, "Y"],
Year = .x$Year
))
return(mat)
})
locs[[1]] |> head()
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
pesticide_covariates[[1]]
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(-cncntrt, -lft_cns, -id, -Year))) |>
pull(data)
pesticide_covariates[[1]]
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ {
selected_data <- .x %>% select(-cncntrt, -lft_cns, -id, -Year)
as.matrix(selected_data)
})) |>
pull(data)
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
# Convert each list element to a matrix (i.e. is.matrix = TRUE)
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ as.matrix(.x %>% select(-cncntrt, -lft_cns)))) |>
pull(data)
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
# Convert each list element to a matrix (i.e. is.matrix = TRUE)
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(-cncntrt, -lft_cns, -id, -Year))) |>
pull(data)
pesticide_covariates
pesticide_covariates[[1]]
pesticide_covariates <- lapply(pesticide_covariates, as.matrix)
pesticide_covariates[[1]]
lapply(pesticide_covariates,length)
# convert to matrix, but retain dimensions
pesticide_covariates <- pesticide_covariates |>
map(~ as.matrix(.x, is.matrix = TRUE))
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
# Convert each list element to a matrix (i.e. is.matrix = TRUE)
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(-cncntrt, -lft_cns, -id, -Year))) |>
pull(data)
# convert to matrix, but retain dimensions
pesticide_covariates <- pesticide_covariates |>
map(~ as.matrix(.x, is.matrix = TRUE))
pesticide_covariates[[1]] |> head()
pesticide_covariates[[1]][,1:20] |> head()
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
# Convert each list element to a matrix (i.e. is.matrix = TRUE)
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(-cncntrt, -lft_cns, -id, -id.1, -Year))) |>
pull(data)
# convert to matrix, but retain dimensions
pesticide_covariates <- pesticide_covariates |>
map(~ as.matrix(.x, is.matrix = TRUE))
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
pesticide_lod[[1]]
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
pesticide_lod[[1]]
pesticide_lod[[1]] |> dim()
pesticide_lod[[2]]
pesticide_lod[[3]]
pesticide_lod[[4]]
pesticide_lod[[5]]
pesticide_lod[[6]]
lapply(pesticide_lod,length)
lapply(pesticide_outcomes,length)
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
pesticide_mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
debug(prestogp_fit)
pesticide_mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
undebug(prestogp_fit)
debug(check_input)
debug(PrestoGP::check_input)
tar_make()
tar_visnetwork(targets_only = T, exclude = c("kfolds_iter","kfolds_iter3", "set_path","readQS"))
sf_plot_outcome_maps <- tar_read(sf_plot_outcome_maps)
sf_plot_outcome_maps
plot_pesticide_maps <- tar_read(plot_pesticide_maps)
plot_pesticide_maps <- tar_read(plot_pesticide_maps, branches = 1)
plot_covariate_maps1 <- tar_read(plot_covariate_maps, branches = 1)
plot_covariate_maps1
plot_pesticide_maps <- tar_read(plot_pesticide_maps, branches = 1)
plot_pesticide_maps
plot_pesticide_maps <- tar_read(plot_pesticide_maps, branches = 3)
plot_pesticide_maps
explore_skim
library(terra)
r <- terra::rast("/Volumes/set/OpenLandMapData/Bulk_Density/OpenLand_SoilBulkDensity_010cm.tif")
plot(r)
#clip to the US extent
r <- terra::rast("/Volumes/set/OpenLandMapData/OLM_Combined/OLM_US_Crop_Clay_Content.tif")
r
plot(r[[1]])
plot(r[[6]])
r <- terra::rast("/Volumes/set/OpenLandMapData/OLM_Combined/OLM_US_Crop_Soil_Order.tif")
plot(r[[1]])
r
names(r)
plot(r[6])
plot(r[[6]])
colnames(sf_pesticide_partition_cleaned[[1]])
# Create and plot using ggplot an example covariance matrix of 1000 variables
library(MASS)
library(ggplot2)
set.seed(123)
n <- 1000
Sigma <- matrix(0, n, n)
for (i in 1:n) {
for (j in 1:n) {
Sigma[i, j] <- 0.5^abs(i - j)
}
}
Sigma <- Sigma + diag(n) * 0.1
X <- mvrnorm(n = 1000, rep(0, n), Sigma)
ggplot(data = as.data.frame(Sigma), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient(low = "white", high = "blue") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
head(Sigma)
Sigma <- matrix(0, n, n)
for (i in 1:n) {
for (j in 1:n) {
Sigma[i, j] <- 0.5^abs(i - j)
}
}
Sigma <- Sigma + diag(n) * 0.1
X <- mvrnorm(n = 1000, rep(0, n), Sigma)
Sigma <- cov(X)
Sigma <- as.data.frame(as.table(Sigma))
names(Sigma) <- c("Var1", "Var2", "Freq")
ggplot(data = Sigma, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient(low = "white", high = "blue") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
n <- 100
Sigma <- matrix(0, n, n)
for (i in 1:n) {
for (j in 1:n) {
Sigma[i, j] <- 0.5^abs(i - j)
}
}
Sigma <- Sigma + diag(n) * 0.1
X <- mvrnorm(n = 1000, rep(0, n), Sigma)
Sigma <- cov(X)
Sigma <- as.data.frame(as.table(Sigma))
names(Sigma) <- c("Var1", "Var2", "Freq")
ggplot(data = Sigma, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient(low = "white", high = "blue") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
colnames(sf_pesticide_partition_cleaned[[1]])
View(sf_pesticide_partition_cleaned)
plot(r[6])
plot_pesticide_maps <- tar_read(plot_pesticide_maps, branches = 6)
plot_pesticide_maps
data <- sf_pesticide_partition_cleaned[[1]]
states <- st_as_sf(maps::map("state", plot = FALSE, fill = TRUE))
df_obs <- data |> filter(lft_cns == 0)
df_cens <- data |> filter(lft_cns == 1)
p <- ggplot() +
geom_sf(data = df_cens, size = 0.5) +
geom_sf(data = df_obs, aes(color = cncntrt)) +
# facet_wrap(~ Year) +
scale_color_viridis_c(option = "A", trans = scales::pseudo_log_trans(sigma = 0.005)) +
geom_sf(data = states, fill = NA, size=0.15) +
theme_minimal() +
theme(legend.position = "right") +
ggtitle(data$ChmclNm)
p
getwd()
tar_visnetwork(targets_only = T)
tar_visnetwork(targets_only = T, exclude = c("kfolds_iter","kfolds_iter3"))
COMPUTE_MODE <- 1
path_base <-
ifelse(COMPUTE_MODE == 1,
"/Volumes/SET/Projects/PrestoGP_Pesticides/input/",
ifelse(COMPUTE_MODE == 2,
"/ddn/gs1/group/set/Projects/PrestoGP_Pesticides/input/",
ifelse(COMPUTE_MODE == 3,
"/opt/",
ifelse(COMPUTE_MODE == 4,
"~/Downloads/",
stop("COMPUTE_MODE should be one of 1, 2, 3, or 4.\n")
)
)
)
)
path_base
## TWI
twi <- paste0(path_base, "TWI/CONUS_TWI_epsg5072_30m_unmasked.tif")
twi_ras <- terra::rast(twi)
twi_ras
plot(twi_ras)
View(sf_pesticide_partition_cleaned)
<<<<<<< HEAD
sf_pesticide_partition_cleaned[[1]]
sf_pesticide_partition_cleaned[[2]]
sf_pesticide_partition_cleaned <- tar_read(sf_pesticide_partition_cleaned)
sf_pesticide_partition_cleaned[[1]]
tar_make()
tar_invalidate(sf_pesticide_partition_cleaned)
tar_make()
tar_visnetwork()
sf_pesticide_partition_cleaned <- tar_read(sf_pesticide_partition_cleaned)
sf_pesticide_partition_cleaned[[1]]
sf_pesticide_partition_cleaned[[3]]
sf_pesticide_partition_cleaned[[2]]
sf_pesticide_partition_cleaned[[1]]
explore_skim <- tar_read(explore_skim)
explore_skim
View(explore_skim)
tar_make()
?fct_explicit_na
library(tidyverse)
?fct_explicit_na
sf_pesticide_partition <- tar_read(sf_pesticide_partition)
sf_pesticide_partition[[1]]
sf_pesticide <- tar_read(sf_pesticide)
sf_pesticide
readQS <- tar_read(readQS)
readQS
t1 <- st_as_sf(readQS, coords = c("X","Y"), crs = 5070)
library(sf)
t1 <- st_as_sf(readQS, coords = c("X","Y"), crs = 5070)
t1
?st_as_sf
tar_make()
tar_make()
tar_make()
sf_pesticide <- tar_read(sf_pesticide)
sf_pesticide
sf_pesticide_partition <- tar_read(sf_pesticide_partition)
sf_pesticide_partition
sf_pesticide_partition[[1]]
sf_pesticide_partition[[2]]
sf_pesticide_partition[[3]]
sf_pesticide_partition_cleaned <- tar_read(sf_pesticide_partition_cleaned)
sf_pesticide_partition_cleaned
sf_pesticide_partition_cleaned[[1]]
sf_pesticide_partition[[1]]
tar_visnetwork(targets_only = T)
getwd()
getwd()
getwd()
getwd()
tar_visnetwork(targets_only = T)
# Created by use_targets().
# Main targets file for the project.
# Created by Kyle P Messier
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
library(PrestoGP)
library(tibble)
library(sf)
library(terra)
library(qs)
library(tidyverse)
library(skimr)
library(rsample)
library(stats)
library(ggplot2)
library(parsnip)
library(fastDummies)
library(scales)
library(ggridges)
library(spatialsample)
library(broom)
library(yardstick)
library(data.table)
tar_visnetwork(targets_only = T)
getwd()
getwd()
