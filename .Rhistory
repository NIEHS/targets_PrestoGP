getwd()
use renv::deactivate()
renv::deactivate()
getwd()
?download_wbd
library(beepr)
library(nhdplusTools)
library(nhdplusTools)
?download_wbd
getwd()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(dataRetrieval)
library(dplyr)
library(beepr)
library(lubridate)
library(tidyverse)
library(data.table)
startDate <- "2000-01-01"
endDate <- "2022-12-31"
state.list <- state.abb[c(-2,-11)]
library(dataRetrieval)
library(dplyr)
library(beepr)
library(lubridate)
library(tidyverse)
library(data.table)
param.chlorotriazines <- c("39632","04040","04038","04039","38535","04035")
startDate <- "2000-01-01"
endDate <- "2020-12-31"
state.list <- state.abb[c(-2,-11)]
state.fun.AZO <- function(x){
print(x)
temp <- whatWQPdata(statecode = state.list[x],
parameterCd=param.chlorotriazines)
temp <- temp[temp$MonitoringLocationTypeName=="Well",]
if (nrow(temp)>0){
site.info <- str_subset(temp$MonitoringLocationIdentifier,"(?<=USGS-)\\d+") %>%
str_extract("(?<=USGS-)\\d+")   %>%
readNWISsite() %>%
select(c(site_no,well_depth_va))
site.info$MonitoringLocationIdentifier <- paste0("USGS-",site.info$site_no)
data.chlorotriazines <- readWQPqw(temp$MonitoringLocationIdentifier, param.chlorotriazines,
startDate = startDate, endDate = endDate)
result <- left_join(data.chlorotriazines,temp,by = "MonitoringLocationIdentifier") %>%
left_join(site.info,by = "MonitoringLocationIdentifier")
return(result)
}
}
data.AZO <- lapply(1:48, state.fun.AZO)
beep(sound = 2)
data.AZO.final<- do.call(rbind.data.frame, data.AZO)
beep(sound = 2)
censored_text <- c("Not Detected",
"Non-Detect",
"Non Detect",
"Detected Not Quantified",
"Below Quantification Limit")
data.AZO.censored <- data.AZO.final %>%
mutate(left_censored = grepl(paste(censored_text, collapse="|"),
ResultDetectionConditionText,
ignore.case = TRUE),
Year = lubridate::year(ActivityStartDate)) %>%
select(site_no = MonitoringLocationIdentifier,
startDate = ActivityStartDate,
Year,
parm_cd = USGSPCode,
ChemicalName = CharacteristicName,
left_censored,
lon,lat,well_depth = well_depth_va,
CountyName,StateName,
Units = ResultMeasure.MeasureUnitCode,
result_va = ResultMeasureValue,
detection_level = DetectionQuantitationLimitMeasure.MeasureValue,
dl_units = DetectionQuantitationLimitMeasure.MeasureUnitCode) %>%
arrange(startDate, parm_cd)
data.AZO.daily.avg <- data.AZO.censored %>%
group_by(ChemicalName,site_no,startDate) %>%
mutate("id" = cur_group_id(),"nsamples" = n()) %>%
summarise(concentration = fifelse(all(left_censored),max(detection_level),
fifelse(all(!left_censored),mean(result_va),
mean(result_va[!left_censored]),
)),
left_censored = fifelse(all(left_censored),TRUE,
fifelse(all(!left_censored),FALSE,
FALSE,
)),
Longitude = first(lon),
Latitude= first(lat),
ChemicalName = first(ChemicalName),
site_no = first(site_no),
parm_cd = first(parm_cd),
Units = first(coalesce(Units,dl_units)),
CountyName = first(CountyName),
StateName = first(StateName),
well_depth = first(well_depth),
Year = first(Year),
id = first(id),
nsamples = sum(nsamples))
data.AZO.year.avg <- data.AZO.daily.avg %>%
group_by(ChemicalName,site_no,Year) %>%
mutate("id" = cur_group_id()) %>%
summarise(concentration = fifelse(all(left_censored),max(concentration),
fifelse(all(!left_censored),mean(concentration),
mean(concentration[!left_censored]),
)),
left_censored = fifelse(all(left_censored),TRUE,
fifelse(all(!left_censored),FALSE,
FALSE,
)),
Longitude = first(Longitude),
Latitude= first(Latitude),
ChemicalName = first(ChemicalName),
site_no = first(site_no),
parm_cd = first(parm_cd),
Units = first(Units),
CountyName = first(CountyName),
StateName = first(StateName),
well_depth = first(well_depth),
Year = first(Year),
id = first(id),
nsamples = sum(nsamples)) %>%
arrange(Year, site_no,parm_cd)
library(dataRetrieval)
library(dplyr)
library(beepr)
library(lubridate)
library(tidyverse)
library(data.table)
param.chlorotriazines <- c("39632","04040","04038","04039","38535","04035")
startDate <- "2000-01-01"
endDate <- "2022-12-31"
state.list <- state.abb[c(-2,-11)]
state.fun.AZO <- function(x){
print(x)
temp <- whatWQPdata(statecode = state.list[x],
parameterCd=param.chlorotriazines)
temp <- temp[temp$MonitoringLocationTypeName=="Well",]
if (nrow(temp)>0){
site.info <- str_subset(temp$MonitoringLocationIdentifier,"(?<=USGS-)\\d+") %>%
str_extract("(?<=USGS-)\\d+")   %>%
readNWISsite() %>%
select(c(site_no,well_depth_va))
site.info$MonitoringLocationIdentifier <- paste0("USGS-",site.info$site_no)
data.chlorotriazines <- readWQPqw(temp$MonitoringLocationIdentifier, param.chlorotriazines,
startDate = startDate, endDate = endDate)
result <- left_join(data.chlorotriazines,temp,by = "MonitoringLocationIdentifier") %>%
left_join(site.info,by = "MonitoringLocationIdentifier")
return(result)
}
}
data.AZO <- lapply(1:48, state.fun.AZO)
beep(sound = 2)
data.AZO.final<- do.call(rbind.data.frame, data.AZO)
beep(sound = 2)
censored_text <- c("Not Detected",
"Non-Detect",
"Non Detect",
"Detected Not Quantified",
"Below Quantification Limit")
data.AZO.censored <- data.AZO.final %>%
mutate(left_censored = grepl(paste(censored_text, collapse="|"),
ResultDetectionConditionText,
ignore.case = TRUE),
Year = lubridate::year(ActivityStartDate)) %>%
select(site_no = MonitoringLocationIdentifier,
startDate = ActivityStartDate,
Year,
parm_cd = USGSPCode,
ChemicalName = CharacteristicName,
left_censored,
lon,lat,well_depth = well_depth_va,
CountyName,StateName,
Units = ResultMeasure.MeasureUnitCode,
result_va = ResultMeasureValue,
detection_level = DetectionQuantitationLimitMeasure.MeasureValue,
dl_units = DetectionQuantitationLimitMeasure.MeasureUnitCode) %>%
arrange(startDate, parm_cd)
data.AZO.daily.avg <- data.AZO.censored %>%
group_by(ChemicalName,site_no,startDate) %>%
mutate("id" = cur_group_id(),"nsamples" = n()) %>%
summarise(concentration = fifelse(all(left_censored),max(detection_level),
fifelse(all(!left_censored),mean(result_va),
mean(result_va[!left_censored]),
)),
left_censored = fifelse(all(left_censored),TRUE,
fifelse(all(!left_censored),FALSE,
FALSE,
)),
Longitude = first(lon),
Latitude= first(lat),
ChemicalName = first(ChemicalName),
site_no = first(site_no),
parm_cd = first(parm_cd),
Units = first(coalesce(Units,dl_units)),
CountyName = first(CountyName),
StateName = first(StateName),
well_depth = first(well_depth),
Year = first(Year),
id = first(id),
nsamples = sum(nsamples))
data.AZO.year.avg <- data.AZO.daily.avg %>%
group_by(ChemicalName,site_no,Year) %>%
mutate("id" = cur_group_id()) %>%
summarise(concentration = fifelse(all(left_censored),max(concentration),
fifelse(all(!left_censored),mean(concentration),
mean(concentration[!left_censored]),
)),
left_censored = fifelse(all(left_censored),TRUE,
fifelse(all(!left_censored),FALSE,
FALSE,
)),
Longitude = first(Longitude),
Latitude= first(Latitude),
ChemicalName = first(ChemicalName),
site_no = first(site_no),
parm_cd = first(parm_cd),
Units = first(Units),
CountyName = first(CountyName),
StateName = first(StateName),
well_depth = first(well_depth),
Year = first(Year),
id = first(id),
nsamples = sum(nsamples)) %>%
arrange(Year, site_no,parm_cd)
save(data.AZO.year.avg,file = "/../input/data_process/data_AZO_year_avg.RData")
getwd()
getwd()
getwd()
getwd()
data.AZO.year.avg <- data.AZO.daily.avg %>%
group_by(ChemicalName,site_no,Year) %>%
mutate("id" = cur_group_id()) %>%
summarise(concentration = fifelse(all(left_censored),max(concentration),
fifelse(all(!left_censored),mean(concentration),
mean(concentration[!left_censored]),
)),
left_censored = fifelse(all(left_censored),TRUE,
fifelse(all(!left_censored),FALSE,
FALSE,
)),
Longitude = first(Longitude),
Latitude= first(Latitude),
ChemicalName = first(ChemicalName),
site_no = first(site_no),
parm_cd = first(parm_cd),
Units = first(Units),
CountyName = first(CountyName),
StateName = first(StateName),
well_depth = first(well_depth),
Year = first(Year),
id = first(id),
nsamples = sum(nsamples)) %>%
arrange(Year, site_no,parm_cd)
getwd()
getwd()
getwd()
save(data.AZO.year.avg,file = "/../input/data_process/data_AZO_year_avg.RData")
save(data.AZO.year.avg,file = "/../../input/data_process/data_AZO_year_avg.RData")
getwd("/../")
getwd("/..")
save(data.AZO.year.avg,file = "/input/data_process/data_AZO_year_avg.RData")
library(R.utils)
getRelativePath("/Volumes/shag/PrestoGP_Pesticides/input/data_process/")
getwd()
getRelativePath("/Volumes/shag/PrestoGP_Pesticides/input/data_process/")
save(data.AZO.year.avg,file = "../../input/data_process/data_AZO_year_avg.RData")
View(data.AZO.year.avg)
getwd()
renv::deactivate()
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(terra)
library(exactextractr)
library(lubridate)
library(tidyverse)
library(data.table)
library(nhdplusTools)
# Read in main pesticide data here
data.AZO <- sf::st_read("input/data_process/data_AZO_watershed_huc_join.shp")
data.AZO
plot(data.AZO[1:5])
# Cropped Raster directory
# cropped.raster.dir <- "/Volumes/SHAG/OpenLandMapData/OLM_Combined/"
cropped.raster.dir <- "input/OpenLandMapData/OLM_Combined/"
Clay_Content.stack <- terra::rast(paste0(cropped.raster.dir,"OLM_US_Crop_Clay_Content.tif"))
Clay_Content.stack
plot(Clay_Content.stack)
# Directories of individual raw OLM data
OLM.dir.pH <- "input/OpenLandMapData/pH"
pH.stack <- terra::rast(OLM.filenames.pH)
# Get Raster data filenames/paths
OLM.filenames.pH <- list.files(path = OLM.dir.pH,
pattern = "*.tif", full.names = T)
pH.stack <- terra::rast(OLM.filenames.pH)
pH.stack
plot(pH.stack[[1]])
pH.stack <- terra::rast(OLM.filenames.pH) %>% terra::crop(US.bb)
# US bounding box
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 24.7433195, 49.3457868))
pH.stack <- terra::rast(OLM.filenames.pH) %>% terra::crop(US.bb)
beepr::beep(sound =2)
beepr::beep(sound =2)
beepr::beep(sound =1)
beepr::beep(sound =3)
beepr::beep(sound =4)
beepr::beep(sound =4)
beepr::beep(sound =5)
beepr::beep(sound =6)
beepr::beep(sound =7)
beepr::beep(sound =8)
beepr::beep(sound =9)
beepr::beep(sound =10)
beepr::beep(sound =11)
beepr::beep(sound =12)
beepr::beep(sound =13)
beepr::beep(sound =7)
beepr::beep(sound =2)
beepr::beep(sound =1)
beepr::beep(sound =3)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(terra)
library(exactextractr)
library(lubridate)
library(tidyverse)
library(data.table)
library(nhdplusTools)
library(sf)
library(terra)
library(exactextractr)
library(lubridate)
library(tidyverse)
library(data.table)
library(nhdplusTools)
data.NAWQA <- data.table::fread("input/NAWQA_Pesticides/EPest.county.estimates.2000.txt")
View(data.NAWQA)
unique(data.NAWQA$COMPOUND)
NAWQA.files <- c("EPest.county.estimates.2000.txt",
"EPest.county.estimates.2001.txt",
"EPest.county.estimates.2002.txt",
"EPest.county.estimates.2003.txt",
"EPest.county.estimates.2004.txt",
"EPest.county.estimates.2005.txt",
"EPest.county.estimates.2006.txt",
"EPest.county.estimates.2007.txt",
"EPest.county.estimates.2008.txt",
"EPest.county.estimates.2009.txt",
"EPest.county.estimates.2010.txt",
"EPest.county.estimates.2011.txt",
"EPest.county.estimates.2012.txt",
"EPest.county.estimates.2013_2017_v2.txt",
"EPest.county.estimates.2018.txt",
"EPest.county.estimates.2019.txt")
l <- lapply(NAWQA.files, fread, sep=",")
NAWQA.files <- c("input/NAWQA_Pesticides/EPest.county.estimates.2000.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2001.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2002.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2003.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2004.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2005.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2006.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2007.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2008.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2009.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2010.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2011.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2012.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2013_2017_v2.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2018.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2019.txt")
l <- lapply(NAWQA.files, fread, sep=",")
NAWQA.files <- c("input/NAWQA_Pesticides/EPest.county.estimates.2000.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2001.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2002.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2003.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2004.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2005.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2006.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2007.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2008.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2009.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2010.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2011.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2012.txt",
"input/NAWQA_Pesticides/EPest.county.estimates_2013_2017_v2.txt",
"input/NAWQA_Pesticides/EPest.county.estimates_2018.txt",
"input/NAWQA_Pesticides/EPest.county.estimates_2019.txt")
l <- lapply(NAWQA.files, fread, sep=",")
NAWQA.files <- c("input/NAWQA_Pesticides/EPest.county.estimates.2000.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2001.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2002.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2003.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2004.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2005.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2006.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2007.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2008.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2009.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2010.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2011.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2012.txt",
"input/NAWQA_Pesticides/EPest_county_estimates_2013_2017_v2.txt",
"input/NAWQA_Pesticides/EPest_county_estimates_2018.txt",
"input/NAWQA_Pesticides/EPest_county_estimates_2018.txt")
l <- lapply(NAWQA.files, fread, sep=",")
beepr::beep(sound = 5)
l[[1]]
l[[2]]
l[[3]]
?fread
l <- lapply(NAWQA.files, fread, sep="\t")
l[[1]]
dt <- rbindlist( l )
dim(dt)
?setkey
setkey( COMPOUND , YEAR )
colnames(df)
colnames(dt)
setkey(dt, COMPOUND , YEAR )
library(tigris) # for getting county shapefile
install.packages("tigris")
library(tigris) # for getting county shapefile
?counties
centroids <- counties(resolution = "20m") %>%
st_centroid()
plot(centroids)
plot(centroids[[1]])
plot(centroids[1])
head(centroids)
unique(centroids$STATEFP)
unique(centroids$STATEFP) |> sort()
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 24.7433195, 49.3457868))
US.bb
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
plot(centroids[1])
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 23.7433195, 49.3457868))
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop()
plot(centroids[1])
centroids1 <- counties(resolution = "20m") |>
st_centroid()
plot(centroids1[1])
US.bb
US.bb
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 21.7433195, 49.3457868))
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop()
?st_crop
US.bb
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
plot(centroids[1])
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 18.7433195, 49.3457868))
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
plot(centroids[1])
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 18.7433195, 51.3457868))
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
plot(centroids[1])
centroids
dt
centroids
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb) |>
select(c(STATEFP,COUNTYFP,INTPTLAT,INTPTLON,geometry))
View(centroids)
?left_join
colnames(centroids)
colnames(dt)
?rename
colnames(centroids) <- c("STATE_FIPS_CODE","COUNTY_FIPS_CODE","Lat","Lon","geometry")
NAWQA.sf <- left_join(centroids,dt,by = c("STATE_FIPS_CODE","COUNTY_FIPS_CODE"),multiple = "all")
dt$STATE_FIPS_CODE <- as.character(dt$STATE_FIPS_CODE)
dt$COUNTY_FIPS_CODE <- as.character(dt$COUNTY_FIPS_CODE)
NAWQA.sf <- left_join(centroids,dt,by = c("STATE_FIPS_CODE","COUNTY_FIPS_CODE"),multiple = "all")
nrow(data.NAWQA)
nrow(dt)
nrow(dt)/1e6
nrow(NAWQA.sf)/1e6
NAWQA.sf
dt
sum(is.na(dt$EPEST_LOW_KG) & is.na(dt$EPEST_HIGH_KG))
sum(dt$EPEST_LOW_KG==0 & dt$EPEST_HIGH_KG==0)
sum(dt$EPEST_LOW_KG==0 & is.na(dt$EPEST_HIGH_KG))
sum(is.na(dt$EPEST_HIGH_KG))
sum(is.na(dt$EPEST_LOW_KG))
sum(is.na(dt$COMPOUND))
dt
NAWQA.sf
getwd()
getwd()
