g1
tar_visnetwork(targets_only = T)
tar_make()
tar_make()
tar_visnetwork(targets_only = T)
library(parsnip)
?fit
sf_outcomes
pest_data <- data.frame(
y1 = rnorm(100),  # Example response variable 1
y2 = rnorm(100),  # Example response variable 2
x1 = rnorm(100),  # Example predictor variable 1
x2 = rnorm(100)   # Example predictor variable 2
)
# Fit using the linear_model function in Parsnip
lasso <- linear_reg() %>%
set_engine("glmnet", family = "mgaussian") %>%
set_mode("regression") %>%
fit(cbind(y1, y2) ~ ., data = pest_data)
pest_data <- data.frame(
y1 = rnorm(100),  # Example response variable 1
y2 = rnorm(100),  # Example response variable 2
x1 = rnorm(100),  # Example predictor variable 1
x2 = rnorm(100)   # Example predictor variable 2
)
pest_data
a <- cbind(y1, y2)
y1 = rnorm(100),  # Example response variable 1
y1 = rnorm(100)
y2 = rnorm(100)
a <- cbind(y1, y2)
dim(a)
a
?glmnet
df
pest_data <- df |>
select(c("cncntrt","Year","left_cns"))
df
df
pest_data <- df |>
select(c("cncntrt","Year","lft_cns"))
pest_data
# Fit using the linear_model function in Parsnip
lasso <- linear_reg() %>%
set_engine("glmnet", family = "gaussian") %>%
set_mode("regression") %>%
fit(cncntrt ~ ., data = pest_data)
pest_data <- data.frame(
y1 = rnorm(100),  # Example response variable 1
y2 = rnorm(100),  # Example response variable 2
x1 = rnorm(100),  # Example predictor variable 1
x2 = rnorm(100)   # Example predictor variable 2
)
# Fit using the linear_model function in Parsnip
lasso <- linear_reg() %>%
set_engine("glmnet", family = "mgaussian") %>%
set_mode("regression") %>%
fit(cbind(y1, y2) ~ ., data = pest_data)
# Fit using the linear_model function in Parsnip
lasso <- linear_reg(penalty = 1) %>%
set_engine("glmnet", family = "mgaussian") %>%
set_mode("regression") %>%
fit(cbind(y1, y2) ~ ., data = pest_data)
lasso
lasso$fit
lasso$fit$beta
data_partitioned <- tar_read(sf_pesticide_partition_cleaned)
data_partitioned[[1]]
data_partitioned[[2]]
data_partitioned[[2]][,l10n_info()]
data_partitioned[[2]][,1:10]
data_partitioned[[2]][,1:5]
data_partitioned[[1]]
data_outcome <- data_partitioned[[1]] |>
st_drop_geometry()
data_outcome
data_model <- left_join(data_outcome, data_covariates, by = "id")
data_covariates <- data_partitioned[[2]] |>
st_drop_geometry()
data_model <- left_join(data_outcome, data_covariates, by = "id")
data_model
data_model[,1:5]
data_model[,1:10]
data <- left_join(data_outcome, data_covariates, by = "id")
data
data_covariates
colnames(data_covariates)
colnames(data_covariates)[1:20]
data_outcome
data_outcome_to_join <- data_outcome |>
st_drop_geometry() |>
filter("cncntrt","id") |>
as.data.frame() |>
mutate(id = row_number())
data_outcome_to_join <- data_outcome |>
st_drop_geometry() |>
select(c("cncntrt","id")) |>
as.data.frame() |>
mutate(id = row_number())
data_outcome_to_join
data_outcome_to_join |> head()
data_covariates
colnames(data_covariates)[1:10]
colnames(data_covariates)[1790:1803]
data_covariates_to_join <- data_covariates |>
st_drop_geometry() |>
select(-"geometry") |>
as.data.frame() |>
mutate(id = row_number())
data_covariates <- sf_pesticide_partition_cleaned[[2]]
data_covariates_to_join <- data_covariates |>
st_drop_geometry() |>
select(-"geometry") |>
as.data.frame() |>
mutate(id = row_number())
data_covariates_to_join <- data_covariates |>
st_drop_geometry() |>
as.data.frame() |>
mutate(id = row_number())
View(data_covariates_to_join)
data_fit <- left_join(data_outcome_to_join, data_covariates_to_join, by = "id")
View(data_fit)
data_fit <- left_join(data_outcome_to_join, data_covariates_to_join, by = "id") |>
select(-"id")
View(data_fit)
hist(data_fit$cncntrt)
summary(data_fit$cncntrt)
data_outcome
data_outcome[data_outcome$cncntrt==0,]
d1 <- tar_read(readQS)
d1
d1[d1$cncntrt==0,]
p1<-d1[d1$cncntrt==0,]
p1$X
p1$Y
p1[c("X","Y")]
p1
azo <- st_read("/Volumes/SET/Projects/PrestoGP_Pesticides/input/data_process/data_AZO_watershed_huc_join.shp")
azo
azo.idx <- azo[azo$cncntrt==0,]
azo.idx
azo.initial <- load("/Volumes/SET/Projects/PrestoGP_Pesticides/input/data_process/data_AZO_year_avg.RData")
azo.initial
azo.initial[[1]]
load("/Volumes/SET/Projects/PrestoGP_Pesticides/input/data_process/data_AZO_year_avg.RData")
data.AZO.year.avg
data.AZO.year.avg[data.AZO.year.avg$concentration==0,]
sf_pesticide_partition_cleaned[[3]]
sf_pesticide_partition_cleaned[[3]]$wll_dpt
knitr::opts_chunk$set(echo = TRUE)
library(dataRetrieval)
install.packages("dataRetrieval")
library(dataRetrieval)
library(dplyr)
library(beepr)
install.packages("beepr")
library(dataRetrieval)
library(dplyr)
library(beepr)
library(lubridate)
library(tidyverse)
library(data.table)
param.chlorotriazines <- c("39632", "04040", "04038", "04039", "38535", "04035")
startDate <- "2000-01-01"
endDate <- "2022-12-31"
state.list <- state.abb[c(-2, -11)]
state.fun.AZO <- function(x) {
print(x)
temp <- whatWQPdata(
statecode = state.list[x],
parameterCd = param.chlorotriazines
)
temp <- temp[temp$MonitoringLocationTypeName == "Well", ]
if (nrow(temp) > 0) {
site.info <- str_subset(temp$MonitoringLocationIdentifier, "(?<=USGS-)\\d+") %>%
str_extract("(?<=USGS-)\\d+") %>%
readNWISsite() %>%
select(c(site_no, well_depth_va))
site.info$MonitoringLocationIdentifier <- paste0("USGS-", site.info$site_no)
data.chlorotriazines <- readWQPqw(temp$MonitoringLocationIdentifier, param.chlorotriazines,
startDate = startDate, endDate = endDate
)
result <- left_join(data.chlorotriazines, temp, by = "MonitoringLocationIdentifier") %>%
left_join(site.info, by = "MonitoringLocationIdentifier")
return(result)
}
}
data.AZO <- lapply(1:48, state.fun.AZO)
sum(is.na(sf_pesticide_partition_cleaned[[3]]$wll_dpt))
dim(d1)
dim(d1,1)
dim(d1)[1]
dim(d1)[1]-6
tar_make()
p1 <- tar_read(plot_pesticide_maps_57fe39ed)
p1
sf_pesticide_partition_cleaned <- tar_read(sf_pesticide_partition_cleaned)
sf_pesticide_partition_cleaned[[1]]
ggplot(sf_pesticide_partition_cleaned,aes(cncntrt)) + geom_density()
ggplot(sf_pesticide_partition_cleaned |> as.data.frame(),aes(cncntrt)) + geom_density()
ggplot(sf_pesticide_partition_cleaned |> as.data.frame(),aes(cncntrt)) + geom_density() + scale_x_log10()
library(PrestoGP)
?VecchiaModel
?check_input
?PrestoGP::check_input
?PrestoGP::prestogp_fit
?MultivariateVecchiaModel
tar_make()
tar_make()
sf_pesticide_dummies_cv <- tar_read(sf_pesticide_dummies_cv)
sf_pesticide_dummies_cv[[1]]
sf_pesticide_dummies_cv
length(sf_pesticide_dummies_cv)
sf_pesticide_dummies_cv[[1]]
tar_make()
sf_pesticide_dummies_cv[[1]]
sf_pesticide_dummies_cv[[1]]$kfolds
?tar_group_by
tar_make()
tar_make()
sf_pesticide_for_fit <- tar_read(sf_pesticide_for_fit)
sf_pesticide_for_fit
sf_pesticide_for_fit[,1:10]
head(sf_pesticide_for_fit)
View(sf_pesticide_for_fit)
tar_make()
lasso.fit <- tar_read(lasso_fit_by_chem_4eeee620)
lasso.fit$censor_probs
?glmnet
lasso.fit$fit$beta
plot(lasso.fit$fit)
plot(lasso.fit$fit$beta)
plot(lasso.fit$fit)
lasso.fit$lvl
glmnet::plot(lasso.fit$fit)
tar_visnetwork(targets_only = T)
tar_make()
lasso.fit <- tar_read(lasso_fit_by_chem_4eeee620)
autoplot(lasso.fit)
autoplot(lasso.fit$fit)
lasso.fit
autoplot(lasso.fit)
autoplot(lasso.fit$spec)
lasso.fit$fit
tar_make()
f2 <- tar_read(lasso_fit_by_kfold_2808dfa1)
f2
f2[[1]]
f2[[2]]
f2[[3]]
f2[[4]]
plot(f2)
plot(f2[[2]])
f2
autoplot(f2)
autoplot(f2$fit)
tar_make()
f1 <- tar_read(lasso_fit_by_kfold_68b90cee)
f1
autoplot(f1)
autoplot(f1$fit)
plot(f1$fit)
tar_visnetwork(targets_only = T)
?tar_visnetwork
tar_mermaid(targets_only = T)
tm <- tar_mermaid(targets_only = T)
tm
tar_visnetwork(targets_only = T)
tar_visnetwork()
tar_make()
m1 <- tar_read(plot_covariate_maps_97adc691)
m1
1259*24
1259*24/2
=======
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ ifelse(.x$lft_cns == 0, .x$cncntrt, 1e-9))) |>
pull(data)
# 2) A list of LOD, each element is a vector of the limit of detection
# use dplyr to create a separate list by each ChmlNm and create an LOD. The
# LOD should be the cnctrnt
pesticide_lod <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x$cnctrnt)) |>
pull(data)
# 2) A list of LOD, each element is a vector of the limit of detection
# use dplyr to create a separate list by each ChmlNm and create an LOD. The
# LOD should be the cnctrnt
pesticide_lod <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x$cncntrt)) |>
pull(data)
pesticide_outcomes[[1]][1:10]
pesticide_lod[[1]][1:10]
#2a) Create a list of the of the lft_cns variable by ChmclNm
pesticide_lft_cns <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x$lft_cns)) |>
pull(data)
pesticide_lft_cns[[1]][1:10]
cbind(pesticide_lft_cns[[1]][1:10],pesticide_outcomes[[1]][1:10],pesticide_lod[[1]][1:10])
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(-cncntrt, -lft_cns))) |>
pull(data)
pesticide_covariates[[1]]
pesticide_covariates[[2]]
pesticide_covariates[[3]]
pesticide_covariates[[4]]
ls
pesticide_covariates[[3]]
data_analysis
data_analysis[[1]][,1:20]
data_analysis[[1]][,1:10]
data_analysis[,1:10]
# 5) A list of locs, each element is a matrix of the locations
# For now, we will use the locations in the data_analysis - it includes x, y, and time
# Because the locations are from the sf geometry object we need to use the original data
# We get the geometry from the sf object and then add the time (column name is Year)
pesticide_locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ st_coordinates(.x |> select(geometry)))) |>
pull(data)
# 5) A list of locs, each element is a matrix of the locations
# For now, we will use the locations in the data_analysis - it includes x, y, and time
# Because the locations are from the sf geometry object we need to use the original data
# We get the geometry from the sf object and then add the time (column name is Year)
data_analysis <- splits |>
analysis() |>
group_by(ChmclNm) |>
nest() |>
mutate(geometry = st_as_text(geometry)) |>
sf::st_drop_geometry()
# 5) A list of locs, each element is a matrix of the locations
# For now, we will use the locations in the data_analysis - it includes x, y, and time
# Because the locations are from the sf geometry object we need to use the original data
# We get the geometry from the sf object and then add the time (column name is Year)
data_analysis <- splits |>
analysis() |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, st_coordinates())) |>
sf::st_drop_geometry()
data_analysis <- splits |>
analysis() |>
group_by(ChmclNm)
data_analysis <- splits |>
analysis()
data_analysis
# 5) A list of locs, each element is a matrix of the locations
# We need to get the locations from the original data which is an sf object
# Then we need to get the time variable - Year
# Then we need to group by chemical name and nest the data
# Then we need to create a list of the locations
pesticide_locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
pesticide_locs
# 5) A list of locs, each element is a matrix of the locations
# We need to get the locations from the original data which is an sf object
# Then we need to get the time variable - Year
# Then we need to group by chemical name and nest the data
# Then we need to create a list of the locations
# Then we need to conver the geometry to a matrix since PrestoGP doesn't take sf objects
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ st_coordinates(.x))) |>
pull(data)
locs
locs[[1]]
locs[[2]]
# 5) A list of locs, each element is a matrix of the locations
# We need to get the locations from the original data which is an sf object
# Then we need to get the time variable - Year
# Then we need to group by chemical name and nest the data
# Then we need to create a list of the locations
# Then we need to conver the geometry to a matrix since PrestoGP doesn't take sf objects
# Make sure the Time variable is included in the data
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs[[1]]
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs <- locs |>
map(~ st_coordinates(.x)) |>
map(~ as.matrix(.x)) |>
map(~ .x[,-1])
locs[[1]]
length(locs)
head(locs[[1]])
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
head(locs[[1]])
locs <- locs |>
map(~ st_coordinates(.x))
locs[[1]]
locs[[1]] |> head()
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs[[1]]
locs <- locs |>
map(~ st_coordinates(.x))
locs[[1]]
locs[[1]] |> head()
locs <- locs |>
map(~ st_coordinates(.x) + Year)
locs <- locs |> # Retain Year
map(~ .x %>%
st_coordinates() |>
as.data.frame() |>
as.matrix())
?map
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs
locs <- locs |>
map(~ st_coordinates(.x)) |
map(~ as.matrix(.x)) |>
map(~ .x[,-1])
locs <- locs |> # Retain Year
map(~ st_coordinates(.x)) |>
map(~ as.matrix(.x)) |>
map(~ .x[,-1])
locs[[1]]
locs[[1]] |> head()
locs <- locs |> # Retain Year
map(~ st_coordinates(.x)) |>
map(~ .x[,-1])
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs <- locs |> # Retain Year
map(~ st_coordinates(.x)) |>
map(~ .x[,-1])
locs[[1]] |> head()
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs <- locs |> # Retain Year
map(~ st_coordinates(.x))
locs[[1]]
locs[[1]]|> head()
typeof(locs[[1]])
locs[[1]]$X
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs[[1]]
locs <- locs |> # Retain Year
map(Year ~ st_coordinates(.x))
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
# Update the locs list
locs <- locs |>
map(~ {
coords <- st_coordinates(.x)
data.frame(
X = coords[, "X"],
Y = coords[, "Y"],
Year = .x$Year
)
})
locs[[1]]
locs[[1]] |> head()
# 5) A list of locs, each element is a matrix of the locations
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
# Update the locs list
locs <- locs |>
map(~ {
coords <- st_coordinates(.x)
data.frame(
X = coords[, "X"],
Y = coords[, "Y"],
Year = .x$Year
)
})
# 6) Apanasovich is TRUE
Apanasovich = TRUE
# 7) scaling = c(1,1,2) -> maybe needs to be list? could also do c(1,2,3)
scaling = c(1,1,2)
pesticide_mvm <-  new("MultivariateVecchiaModel", n_neighbors = 10)
# 3) Impute.y = TRUE, impute the missing values in Y
Impute.y = TRUE
?prestogp_fit
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
locs[[1]]
is.matrix(locs[[1]])
as.matrix(locs[[1]])
is.matrix(as.matrix(locs[[1]]))
locs <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(id, Year))) |>
pull(data)
# Update the locs list
locs <- locs |>
map(~ {
coords <- st_coordinates(.x)
mat <- as.matrix(data.frame(
X = coords[, "X"],
Y = coords[, "Y"],
Year = .x$Year
))
return(mat)
})
locs[[1]] |> head()
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
pesticide_covariates[[1]]
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(-cncntrt, -lft_cns, -id, -Year))) |>
pull(data)
pesticide_covariates[[1]]
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ {
selected_data <- .x %>% select(-cncntrt, -lft_cns, -id, -Year)
as.matrix(selected_data)
})) |>
pull(data)
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
# Convert each list element to a matrix (i.e. is.matrix = TRUE)
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ as.matrix(.x %>% select(-cncntrt, -lft_cns)))) |>
pull(data)
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
# Convert each list element to a matrix (i.e. is.matrix = TRUE)
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(-cncntrt, -lft_cns, -id, -Year))) |>
pull(data)
pesticide_covariates
pesticide_covariates[[1]]
pesticide_covariates <- lapply(pesticide_covariates, as.matrix)
pesticide_covariates[[1]]
lapply(pesticide_covariates,length)
# convert to matrix, but retain dimensions
pesticide_covariates <- pesticide_covariates |>
map(~ as.matrix(.x, is.matrix = TRUE))
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
# Convert each list element to a matrix (i.e. is.matrix = TRUE)
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(-cncntrt, -lft_cns, -id, -Year))) |>
pull(data)
# convert to matrix, but retain dimensions
pesticide_covariates <- pesticide_covariates |>
map(~ as.matrix(.x, is.matrix = TRUE))
pesticide_covariates[[1]] |> head()
pesticide_covariates[[1]][,1:20] |> head()
# 4) A list of X's, each element is a matrix of the covariates
# For now, we will use the covariates in the data_analysis
# Convert each list element to a matrix (i.e. is.matrix = TRUE)
pesticide_covariates <- data_analysis |>
group_by(ChmclNm) |>
nest() |>
mutate(data = map(data, ~ .x %>% select(-cncntrt, -lft_cns, -id, -id.1, -Year))) |>
pull(data)
# convert to matrix, but retain dimensions
pesticide_covariates <- pesticide_covariates |>
map(~ as.matrix(.x, is.matrix = TRUE))
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
pesticide_lod[[1]]
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
pesticide_lod[[1]]
pesticide_lod[[1]] |> dim()
pesticide_lod[[2]]
pesticide_lod[[3]]
pesticide_lod[[4]]
pesticide_lod[[5]]
pesticide_lod[[6]]
lapply(pesticide_lod,length)
lapply(pesticide_outcomes,length)
soil.mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
pesticide_mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
debug(prestogp_fit)
pesticide_mvm <- prestogp_fit(pesticide_mvm, Y = pesticide_outcomes, lod = pesticide_lod,
impute.y = Impute.y, X = pesticide_covariates, locs = locs,
apanasovich = Apanasovich, scaling = scaling)
undebug(prestogp_fit)
debug(check_input)
debug(PrestoGP::check_input)
tar_make()
tar_visnetwork(targets_only = T, exclude = c("kfolds_iter","kfolds_iter3", "set_path","readQS"))
sf_plot_outcome_maps <- tar_read(sf_plot_outcome_maps)
sf_plot_outcome_maps
plot_pesticide_maps <- tar_read(plot_pesticide_maps)
plot_pesticide_maps <- tar_read(plot_pesticide_maps, branches = 1)
plot_covariate_maps1 <- tar_read(plot_covariate_maps, branches = 1)
plot_covariate_maps1
plot_pesticide_maps <- tar_read(plot_pesticide_maps, branches = 1)
plot_pesticide_maps
plot_pesticide_maps <- tar_read(plot_pesticide_maps, branches = 3)
plot_pesticide_maps
explore_skim
library(terra)
r <- terra::rast("/Volumes/set/OpenLandMapData/Bulk_Density/OpenLand_SoilBulkDensity_010cm.tif")
plot(r)
#clip to the US extent
r <- terra::rast("/Volumes/set/OpenLandMapData/OLM_Combined/OLM_US_Crop_Clay_Content.tif")
r
plot(r[[1]])
plot(r[[6]])
r <- terra::rast("/Volumes/set/OpenLandMapData/OLM_Combined/OLM_US_Crop_Soil_Order.tif")
plot(r[[1]])
r
names(r)
plot(r[6])
plot(r[[6]])
colnames(sf_pesticide_partition_cleaned[[1]])
# Create and plot using ggplot an example covariance matrix of 1000 variables
library(MASS)
library(ggplot2)
set.seed(123)
n <- 1000
Sigma <- matrix(0, n, n)
for (i in 1:n) {
for (j in 1:n) {
Sigma[i, j] <- 0.5^abs(i - j)
}
}
Sigma <- Sigma + diag(n) * 0.1
X <- mvrnorm(n = 1000, rep(0, n), Sigma)
ggplot(data = as.data.frame(Sigma), aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient(low = "white", high = "blue") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
head(Sigma)
Sigma <- matrix(0, n, n)
for (i in 1:n) {
for (j in 1:n) {
Sigma[i, j] <- 0.5^abs(i - j)
}
}
Sigma <- Sigma + diag(n) * 0.1
X <- mvrnorm(n = 1000, rep(0, n), Sigma)
Sigma <- cov(X)
Sigma <- as.data.frame(as.table(Sigma))
names(Sigma) <- c("Var1", "Var2", "Freq")
ggplot(data = Sigma, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient(low = "white", high = "blue") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
n <- 100
Sigma <- matrix(0, n, n)
for (i in 1:n) {
for (j in 1:n) {
Sigma[i, j] <- 0.5^abs(i - j)
}
}
Sigma <- Sigma + diag(n) * 0.1
X <- mvrnorm(n = 1000, rep(0, n), Sigma)
Sigma <- cov(X)
Sigma <- as.data.frame(as.table(Sigma))
names(Sigma) <- c("Var1", "Var2", "Freq")
ggplot(data = Sigma, aes(x = Var1, y = Var2, fill = Freq)) +
geom_tile() +
theme_minimal() +
scale_fill_gradient(low = "white", high = "blue") +
theme(axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank())
colnames(sf_pesticide_partition_cleaned[[1]])
View(sf_pesticide_partition_cleaned)
plot(r[6])
plot_pesticide_maps <- tar_read(plot_pesticide_maps, branches = 6)
plot_pesticide_maps
data <- sf_pesticide_partition_cleaned[[1]]
states <- st_as_sf(maps::map("state", plot = FALSE, fill = TRUE))
df_obs <- data |> filter(lft_cns == 0)
df_cens <- data |> filter(lft_cns == 1)
p <- ggplot() +
geom_sf(data = df_cens, size = 0.5) +
geom_sf(data = df_obs, aes(color = cncntrt)) +
# facet_wrap(~ Year) +
scale_color_viridis_c(option = "A", trans = scales::pseudo_log_trans(sigma = 0.005)) +
geom_sf(data = states, fill = NA, size=0.15) +
theme_minimal() +
theme(legend.position = "right") +
ggtitle(data$ChmclNm)
p
getwd()
tar_visnetwork(targets_only = T)
tar_visnetwork(targets_only = T, exclude = c("kfolds_iter","kfolds_iter3"))
COMPUTE_MODE <- 1
path_base <-
ifelse(COMPUTE_MODE == 1,
"/Volumes/SET/Projects/PrestoGP_Pesticides/input/",
ifelse(COMPUTE_MODE == 2,
"/ddn/gs1/group/set/Projects/PrestoGP_Pesticides/input/",
ifelse(COMPUTE_MODE == 3,
"/opt/",
ifelse(COMPUTE_MODE == 4,
"~/Downloads/",
stop("COMPUTE_MODE should be one of 1, 2, 3, or 4.\n")
)
)
)
)
path_base
## TWI
twi <- paste0(path_base, "TWI/CONUS_TWI_epsg5072_30m_unmasked.tif")
twi_ras <- terra::rast(twi)
twi_ras
plot(twi_ras)
View(sf_pesticide_partition_cleaned)
<<<<<<< HEAD
sf_pesticide_partition_cleaned[[1]]
sf_pesticide_partition_cleaned[[2]]
sf_pesticide_partition_cleaned <- tar_read(sf_pesticide_partition_cleaned)
sf_pesticide_partition_cleaned[[1]]
tar_make()
tar_invalidate(sf_pesticide_partition_cleaned)
tar_make()
tar_visnetwork()
sf_pesticide_partition_cleaned <- tar_read(sf_pesticide_partition_cleaned)
sf_pesticide_partition_cleaned[[1]]
sf_pesticide_partition_cleaned[[3]]
sf_pesticide_partition_cleaned[[2]]
sf_pesticide_partition_cleaned[[1]]
explore_skim <- tar_read(explore_skim)
explore_skim
View(explore_skim)
tar_make()
?fct_explicit_na
library(tidyverse)
?fct_explicit_na
sf_pesticide_partition <- tar_read(sf_pesticide_partition)
sf_pesticide_partition[[1]]
sf_pesticide <- tar_read(sf_pesticide)
sf_pesticide
readQS <- tar_read(readQS)
readQS
t1 <- st_as_sf(readQS, coords = c("X","Y"), crs = 5070)
library(sf)
t1 <- st_as_sf(readQS, coords = c("X","Y"), crs = 5070)
t1
?st_as_sf
tar_make()
tar_make()
tar_make()
sf_pesticide <- tar_read(sf_pesticide)
sf_pesticide
sf_pesticide_partition <- tar_read(sf_pesticide_partition)
sf_pesticide_partition
sf_pesticide_partition[[1]]
sf_pesticide_partition[[2]]
sf_pesticide_partition[[3]]
sf_pesticide_partition_cleaned <- tar_read(sf_pesticide_partition_cleaned)
sf_pesticide_partition_cleaned
sf_pesticide_partition_cleaned[[1]]
sf_pesticide_partition[[1]]
tar_visnetwork(targets_only = T)
getwd()
getwd()
getwd()
getwd()
tar_visnetwork(targets_only = T)
# Created by use_targets().
# Main targets file for the project.
# Created by Kyle P Messier
# Load packages required to define the pipeline:
library(targets)
library(tarchetypes)
library(PrestoGP)
library(tibble)
library(sf)
library(terra)
library(qs)
library(tidyverse)
library(skimr)
library(rsample)
library(stats)
library(ggplot2)
library(parsnip)
library(fastDummies)
library(scales)
library(ggridges)
library(spatialsample)
library(broom)
library(yardstick)
library(data.table)
tar_visnetwork(targets_only = T)
getwd()
