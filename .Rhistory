ChemicalName = first(ChemicalName),
site_no = first(site_no),
parm_cd = first(parm_cd),
Units = first(coalesce(Units,dl_units)),
CountyName = first(CountyName),
StateName = first(StateName),
well_depth = first(well_depth),
Year = first(Year),
id = first(id),
nsamples = sum(nsamples))
data.AZO.year.avg <- data.AZO.daily.avg %>%
group_by(ChemicalName,site_no,Year) %>%
mutate("id" = cur_group_id()) %>%
summarise(concentration = fifelse(all(left_censored),max(concentration),
fifelse(all(!left_censored),mean(concentration),
mean(concentration[!left_censored]),
)),
left_censored = fifelse(all(left_censored),TRUE,
fifelse(all(!left_censored),FALSE,
FALSE,
)),
Longitude = first(Longitude),
Latitude= first(Latitude),
ChemicalName = first(ChemicalName),
site_no = first(site_no),
parm_cd = first(parm_cd),
Units = first(Units),
CountyName = first(CountyName),
StateName = first(StateName),
well_depth = first(well_depth),
Year = first(Year),
id = first(id),
nsamples = sum(nsamples)) %>%
arrange(Year, site_no,parm_cd)
save(data.AZO.year.avg,file = "/../input/data_process/data_AZO_year_avg.RData")
getwd()
getwd()
getwd()
getwd()
data.AZO.year.avg <- data.AZO.daily.avg %>%
group_by(ChemicalName,site_no,Year) %>%
mutate("id" = cur_group_id()) %>%
summarise(concentration = fifelse(all(left_censored),max(concentration),
fifelse(all(!left_censored),mean(concentration),
mean(concentration[!left_censored]),
)),
left_censored = fifelse(all(left_censored),TRUE,
fifelse(all(!left_censored),FALSE,
FALSE,
)),
Longitude = first(Longitude),
Latitude= first(Latitude),
ChemicalName = first(ChemicalName),
site_no = first(site_no),
parm_cd = first(parm_cd),
Units = first(Units),
CountyName = first(CountyName),
StateName = first(StateName),
well_depth = first(well_depth),
Year = first(Year),
id = first(id),
nsamples = sum(nsamples)) %>%
arrange(Year, site_no,parm_cd)
getwd()
getwd()
getwd()
save(data.AZO.year.avg,file = "/../input/data_process/data_AZO_year_avg.RData")
save(data.AZO.year.avg,file = "/../../input/data_process/data_AZO_year_avg.RData")
getwd("/../")
getwd("/..")
save(data.AZO.year.avg,file = "/input/data_process/data_AZO_year_avg.RData")
library(R.utils)
getRelativePath("/Volumes/shag/PrestoGP_Pesticides/input/data_process/")
getwd()
getRelativePath("/Volumes/shag/PrestoGP_Pesticides/input/data_process/")
save(data.AZO.year.avg,file = "../../input/data_process/data_AZO_year_avg.RData")
View(data.AZO.year.avg)
getwd()
renv::deactivate()
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(terra)
library(exactextractr)
library(lubridate)
library(tidyverse)
library(data.table)
library(nhdplusTools)
# Read in main pesticide data here
data.AZO <- sf::st_read("input/data_process/data_AZO_watershed_huc_join.shp")
data.AZO
plot(data.AZO[1:5])
# Cropped Raster directory
# cropped.raster.dir <- "/Volumes/SHAG/OpenLandMapData/OLM_Combined/"
cropped.raster.dir <- "input/OpenLandMapData/OLM_Combined/"
Clay_Content.stack <- terra::rast(paste0(cropped.raster.dir,"OLM_US_Crop_Clay_Content.tif"))
Clay_Content.stack
plot(Clay_Content.stack)
# Directories of individual raw OLM data
OLM.dir.pH <- "input/OpenLandMapData/pH"
pH.stack <- terra::rast(OLM.filenames.pH)
# Get Raster data filenames/paths
OLM.filenames.pH <- list.files(path = OLM.dir.pH,
pattern = "*.tif", full.names = T)
pH.stack <- terra::rast(OLM.filenames.pH)
pH.stack
plot(pH.stack[[1]])
pH.stack <- terra::rast(OLM.filenames.pH) %>% terra::crop(US.bb)
# US bounding box
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 24.7433195, 49.3457868))
pH.stack <- terra::rast(OLM.filenames.pH) %>% terra::crop(US.bb)
beepr::beep(sound =2)
beepr::beep(sound =2)
beepr::beep(sound =1)
beepr::beep(sound =3)
beepr::beep(sound =4)
beepr::beep(sound =4)
beepr::beep(sound =5)
beepr::beep(sound =6)
beepr::beep(sound =7)
beepr::beep(sound =8)
beepr::beep(sound =9)
beepr::beep(sound =10)
beepr::beep(sound =11)
beepr::beep(sound =12)
beepr::beep(sound =13)
beepr::beep(sound =7)
beepr::beep(sound =2)
beepr::beep(sound =1)
beepr::beep(sound =3)
knitr::opts_chunk$set(echo = TRUE)
library(sf)
library(terra)
library(exactextractr)
library(lubridate)
library(tidyverse)
library(data.table)
library(nhdplusTools)
library(sf)
library(terra)
library(exactextractr)
library(lubridate)
library(tidyverse)
library(data.table)
library(nhdplusTools)
data.NAWQA <- data.table::fread("input/NAWQA_Pesticides/EPest.county.estimates.2000.txt")
View(data.NAWQA)
unique(data.NAWQA$COMPOUND)
NAWQA.files <- c("EPest.county.estimates.2000.txt",
"EPest.county.estimates.2001.txt",
"EPest.county.estimates.2002.txt",
"EPest.county.estimates.2003.txt",
"EPest.county.estimates.2004.txt",
"EPest.county.estimates.2005.txt",
"EPest.county.estimates.2006.txt",
"EPest.county.estimates.2007.txt",
"EPest.county.estimates.2008.txt",
"EPest.county.estimates.2009.txt",
"EPest.county.estimates.2010.txt",
"EPest.county.estimates.2011.txt",
"EPest.county.estimates.2012.txt",
"EPest.county.estimates.2013_2017_v2.txt",
"EPest.county.estimates.2018.txt",
"EPest.county.estimates.2019.txt")
l <- lapply(NAWQA.files, fread, sep=",")
NAWQA.files <- c("input/NAWQA_Pesticides/EPest.county.estimates.2000.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2001.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2002.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2003.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2004.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2005.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2006.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2007.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2008.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2009.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2010.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2011.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2012.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2013_2017_v2.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2018.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2019.txt")
l <- lapply(NAWQA.files, fread, sep=",")
NAWQA.files <- c("input/NAWQA_Pesticides/EPest.county.estimates.2000.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2001.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2002.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2003.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2004.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2005.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2006.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2007.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2008.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2009.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2010.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2011.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2012.txt",
"input/NAWQA_Pesticides/EPest.county.estimates_2013_2017_v2.txt",
"input/NAWQA_Pesticides/EPest.county.estimates_2018.txt",
"input/NAWQA_Pesticides/EPest.county.estimates_2019.txt")
l <- lapply(NAWQA.files, fread, sep=",")
NAWQA.files <- c("input/NAWQA_Pesticides/EPest.county.estimates.2000.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2001.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2002.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2003.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2004.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2005.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2006.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2007.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2008.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2009.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2010.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2011.txt",
"input/NAWQA_Pesticides/EPest.county.estimates.2012.txt",
"input/NAWQA_Pesticides/EPest_county_estimates_2013_2017_v2.txt",
"input/NAWQA_Pesticides/EPest_county_estimates_2018.txt",
"input/NAWQA_Pesticides/EPest_county_estimates_2018.txt")
l <- lapply(NAWQA.files, fread, sep=",")
beepr::beep(sound = 5)
l[[1]]
l[[2]]
l[[3]]
?fread
l <- lapply(NAWQA.files, fread, sep="\t")
l[[1]]
dt <- rbindlist( l )
dim(dt)
?setkey
setkey( COMPOUND , YEAR )
colnames(df)
colnames(dt)
setkey(dt, COMPOUND , YEAR )
library(tigris) # for getting county shapefile
install.packages("tigris")
library(tigris) # for getting county shapefile
?counties
centroids <- counties(resolution = "20m") %>%
st_centroid()
plot(centroids)
plot(centroids[[1]])
plot(centroids[1])
head(centroids)
unique(centroids$STATEFP)
unique(centroids$STATEFP) |> sort()
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 24.7433195, 49.3457868))
US.bb
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
plot(centroids[1])
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 23.7433195, 49.3457868))
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop()
plot(centroids[1])
centroids1 <- counties(resolution = "20m") |>
st_centroid()
plot(centroids1[1])
US.bb
US.bb
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 21.7433195, 49.3457868))
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop()
?st_crop
US.bb
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
plot(centroids[1])
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 18.7433195, 49.3457868))
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
plot(centroids[1])
US.bb <- terra::ext(c(-124.7844079 , -66.9513812, 18.7433195, 51.3457868))
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb)
plot(centroids[1])
centroids
dt
centroids
centroids <- counties(resolution = "20m") |>
st_centroid() |>
sf::st_crop(US.bb) |>
select(c(STATEFP,COUNTYFP,INTPTLAT,INTPTLON,geometry))
View(centroids)
?left_join
colnames(centroids)
colnames(dt)
?rename
colnames(centroids) <- c("STATE_FIPS_CODE","COUNTY_FIPS_CODE","Lat","Lon","geometry")
NAWQA.sf <- left_join(centroids,dt,by = c("STATE_FIPS_CODE","COUNTY_FIPS_CODE"),multiple = "all")
dt$STATE_FIPS_CODE <- as.character(dt$STATE_FIPS_CODE)
dt$COUNTY_FIPS_CODE <- as.character(dt$COUNTY_FIPS_CODE)
NAWQA.sf <- left_join(centroids,dt,by = c("STATE_FIPS_CODE","COUNTY_FIPS_CODE"),multiple = "all")
nrow(data.NAWQA)
nrow(dt)
nrow(dt)/1e6
nrow(NAWQA.sf)/1e6
NAWQA.sf
dt
sum(is.na(dt$EPEST_LOW_KG) & is.na(dt$EPEST_HIGH_KG))
sum(dt$EPEST_LOW_KG==0 & dt$EPEST_HIGH_KG==0)
sum(dt$EPEST_LOW_KG==0 & is.na(dt$EPEST_HIGH_KG))
sum(is.na(dt$EPEST_HIGH_KG))
sum(is.na(dt$EPEST_LOW_KG))
sum(is.na(dt$COMPOUND))
dt
NAWQA.sf
getwd()
getwd()
getwd()
library(targets)
use_targets()
getwd()
getwd()
getwd()
?tar_target
?targets
library(targets)
?tar_target
# Set target options:
tar_option_set(
packages = c("PrestoGP","tibble","sf","terra"),
format = "qs"
#
# For distributed computing in tar_make(), supply a {crew} controller
# as discussed at https://books.ropensci.org/targets/crew.html.
# Choose a controller that suits your needs. For example, the following
# sets a controller with 2 workers which will run as local R processes:
#
#   controller = crew::crew_controller_local(workers = 2)
#
# Alternatively, if you want workers to run on a high-performance computing
# cluster, select a controller from the {crew.cluster} package. The following
# example is a controller for Sun Grid Engine (SGE).
#
#   controller = crew.cluster::crew_controller_sge(
#     workers = 50,
#     # Many clusters install R as an environment module, and you can load it
#     # with the script_lines argument. To select a specific verison of R,
#     # you may need to include a version string, e.g. "module load R/4.3.0".
#     # Check with your system administrator if you are unsure.
#     script_lines = "module load R"
#   )
#
# Set other options as needed.
)
?tar_read
getwd()
tar_make()
tar_make()
tar_visnetwork()
tar_make()
tar_make()
tar_visnetwork()
install.packages("qs")
tar_make()
?qsave
tar_make()
getwd()
?tar_source
tar_make()
tar_make()
?qread
qread("/Volumes/SET/Projects/PrestoGP_Pesticides/output/Covariates_Calculated/data_AZO_covariates")
qs::qread("/Volumes/SET/Projects/PrestoGP_Pesticides/output/Covariates_Calculated/data_AZO_covariates")
library(qs)
qs::qread(/Volumes/SET/Projects/PrestoGP_Pesticides/output/Covariates_Calculated/data_AZO_covariates)
qs::qread("/Volumes/SET/Projects/PrestoGP_Pesticides/output/Covariates_Calculated/data_AZO_covariates")
tar_make()
qs::qread("/Volumes/SET/Projects/PrestoGP_Pesticides/output/Covariates_Calculated/data_AZO_covariates")
AZO <- qs::qread("/Volumes/SET/Projects/PrestoGP_Pesticides/output/Covariates_Calculated/data_AZO_covariates")
colnames(AZO)
colSums(is.na(AZO))
sum(colSums(is.na(AZO))>0)
idx <- which(colSums(is.na(AZO))>0)
idx
colnames(AZO)[idx]
pesticides <- readRDS("/Volumes/SET/Projects/PrestoGP_Pesticides/output/Covariates_Calculated/data_AZO_covariates.rds")
colSums(is.na(pesticides))
idx2 <- which(colSums(is.na(pesticides))>0)
path_base <- "/Volumes/SET/Projects/PrestoGP_Pesticides/output/Covariates_Calculated/"
`%s%` <- function(x, y) paste0(x, y)
nass_yearly <-
{path_base %s% "NASS/"} %>%
list.files(path = ., pattern = "csv$", full.names = TRUE) %>%
split(., rep(2008:2022, each = 3)) %>%
lapply(function(x) {
lapply(x, data.table::fread) %>%
data.table::rbindlist(., use.names = TRUE, fill = TRUE)
}) %>%
mapply(function(x, y) {
# x: data.table, y: year
x %>% mutate(year = y)
}, ., seq(2008, 2022) %>% split(.,.), SIMPLIFY = FALSE) %>%
data.table::rbindlist(., use.names = TRUE, fill = TRUE)
library(tidyverse)
nass_yearly <-
{path_base %s% "NASS/"} %>%
list.files(path = ., pattern = "csv$", full.names = TRUE) %>%
split(., rep(2008:2022, each = 3)) %>%
lapply(function(x) {
lapply(x, data.table::fread) %>%
data.table::rbindlist(., use.names = TRUE, fill = TRUE)
}) %>%
mapply(function(x, y) {
# x: data.table, y: year
x %>% mutate(year = y)
}, ., seq(2008, 2022) %>% split(.,.), SIMPLIFY = FALSE) %>%
data.table::rbindlist(., use.names = TRUE, fill = TRUE)
nass_yearly_k <- copy(nass_yearly)
names(nass_yearly)
# columns with trailing whitespace (actually duplicated) fix
nass_yearly_k <- nass_yearly_k %>%
mutate(Pears = ifelse(is.na(Pears) & !is.na(`Pears `), `Pears `, Pears),
`Perennial Ice/Snow` = ifelse(is.na(`Perennial Ice/Snow`) & !is.na(`Perennial Ice/Snow `), `Perennial Ice/Snow `, `Perennial Ice/Snow`)) %>%
tidytable::select(-layer, -zone, -`Perennial Ice/Snow `, -`Pears `)
# columns with trailing whitespace (actually duplicated) fix
nass_yearly_k <- nass_yearly_k %>%
mutate(Pears = ifelse(is.na(Pears) & !is.na(`Pears `), `Pears `, Pears),
`Perennial Ice/Snow` = ifelse(is.na(`Perennial Ice/Snow`) & !is.na(`Perennial Ice/Snow `), `Perennial Ice/Snow `, `Perennial Ice/Snow`)) %>%
tidytable::select(-layer, -zone, -`Perennial Ice/Snow `, -`Pears `)
nass_yearly_k <- copy(nass_yearly)
## Join all calculated covariates
## 10/13/2023
## Insang Song
pkgs <- c("tidytable", "rlang", "terra", "sf", "bit64")
nass_yearly_k <- copy(nass_yearly)
?copy
library(data.table)
nass_yearly_k <- copy(nass_yearly)
names(nass_yearly)
# columns with trailing whitespace (actually duplicated) fix
nass_yearly_k <- nass_yearly_k %>%
mutate(Pears = ifelse(is.na(Pears) & !is.na(`Pears `), `Pears `, Pears),
`Perennial Ice/Snow` = ifelse(is.na(`Perennial Ice/Snow`) & !is.na(`Perennial Ice/Snow `), `Perennial Ice/Snow `, `Perennial Ice/Snow`)) %>%
tidytable::select(-layer, -zone, -`Perennial Ice/Snow `, -`Pears `)
nass_yearly <-
{path_base %s% "NASS/"} %>%
list.files(path = ., pattern = "csv$", full.names = TRUE) %>%
split(., rep(2008:2022, each = 3)) %>%
lapply(function(x) {
lapply(x, data.table::fread) %>%
data.table::rbindlist(., use.names = TRUE, fill = TRUE)
}) %>%
mapply(function(x, y) {
# x: data.table, y: year
x %>% mutate(year = y)
}, ., seq(2008, 2022) %>% split(.,.), SIMPLIFY = FALSE) %>%
data.table::rbindlist(., use.names = TRUE, fill = TRUE)
nass_yearly_k <- copy(nass_yearly)
NASS <- readRDS("/Volumes/SET/Projects/PrestoGP_Pesticides/output/NASS/HUCS_8_10_12_NASS.rds")
head(NASS)
sum(is.na(NASS))
colSum(is.na(NASS))
colSums(is.na(NASS))
NASS$Soybeans
colnames(AZO)[idx]
colnames(AZO)
getwd()
getwd()
source("~/Documents/projects_local/targets_PrestoGP/code/03_Pesticide_Analysis/Target_Helpers.R")
NASS <- readRDS("/Volumes/SET/Projects/PrestoGP_Pesticides/output/NASS/HUCS_8_10_12_NASS.rds")
head(NASS)
colSums(is.na(NASS))
tar_make()
tar_destroy()
?tar_destory
?tar_destroy
tar_destroy()
tar_make()
ds <- qread("/Volumes/SET/Projects/PrestoGP_Pesticides/output/Covariates_Calculated/data_AZO_covariates")
head(ds)
colSums(is.na(ds))
colSums(is.na(ds))/66717
colSums(is.na(ds))/66717 * 100
COMPUTE_MODE <- 1
pkgs <- c("rlang", "dplyr", "data.table", "tidyr", "sf", "terra")
## AZO
## No HUC info in RData object.
load("./input/data_process/data_AZO_year_avg.RData")
azo <- data.AZO.year.avg
azo <- st_as_sf(azo, coords = c("Longitude", "Latitude"), crs = 4326)
# azo = sf::read_sf(paste0("./data/data_process/data_AZO_watershed_huc_join.shp"))
azo_s <- azo %>%
dplyr::select(site_no, Year) %>%
unique() %>%
st_transform("EPSG:4326")
library(sf)
# azo = sf::read_sf(paste0("./data/data_process/data_AZO_watershed_huc_join.shp"))
azo_s <- azo %>%
dplyr::select(site_no, Year) %>%
unique() %>%
st_transform("EPSG:4326")
## soil
## geochemical survey
ngs <- read_sf(sprintf("%sngs/ngs.shp", path_base)) %>%
st_transform(st_crs(azo_s))
path_base <-     "/Volumes/SET/Projects/PrestoGP_Pesticides/input/"
## soil
## geochemical survey
ngs <- read_sf(sprintf("%sngs/ngs.shp", path_base)) %>%
st_transform(st_crs(azo_s))
View(ds)
colnames(ds)
sum(colnames(ds) %in% "soilchem")
sum("soilchem" %in% colnames(ds))
896-771
colSums(is.na(ds))
